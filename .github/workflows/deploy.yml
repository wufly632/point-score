name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: wufly632/poker-score

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Build application
      run: npm run build

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Alibaba Cloud Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 阿里云容器镜像仓库暂不支持构建证明认证，暂时禁用
    # - name: Generate artifact attestation
    #   if: github.event_name != 'pull_request'
    #   uses: actions/attest-build-provenance@v1
    #   with:
    #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    #     subject-digest: ${{ steps.build.outputs.digest }}
    #     push-to-registry: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        ALL_TAGS: ${{ needs.build.outputs.tag }}
        ALIYUN_REGISTRY_USERNAME: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        ALIYUN_REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
      run: |
        # 检查必需的环境变量
        if [ -z "$DEPLOY_HOST" ] || [ -z "$DEPLOY_USER" ] || [ -z "$DEPLOY_PATH" ]; then
          echo "❌ 缺少必需的部署环境变量"
          echo "请在 GitHub Secrets 中设置:"
          echo "- DEPLOY_HOST (服务器地址)"
          echo "- DEPLOY_USER (SSH 用户名)" 
          echo "- DEPLOY_SSH_KEY (SSH 私钥)"
          echo "- DEPLOY_PATH (部署路径)"
          exit 1
        fi
        
        # 调试信息：显示构建输出
        echo "🔍 调试信息:"
        echo "- 构建输出标签原始值: '$ALL_TAGS'"
        echo "- 标签字符数: $(echo -n "$ALL_TAGS" | wc -c)"
        echo "- 标签行数: $(echo "$ALL_TAGS" | wc -l)"
        
        # 如果标签为空，尝试手动构建标签
        if [ -z "$ALL_TAGS" ] || [ "$(echo -n "$ALL_TAGS" | wc -c)" -eq 0 ]; then
          echo "⚠️ 构建输出标签为空，使用手动构建的标签"
          IMAGE_TAG="registry.cn-hangzhou.aliyuncs.com/wufly632/poker-score:main"
        else
          # 从多个标签中选择第一个作为部署标签
          IMAGE_TAG=$(echo "$ALL_TAGS" | head -n1 | tr -d '\n\r ')
        fi
        
        # 最终检查镜像标签是否为空
        if [ -z "$IMAGE_TAG" ]; then
          echo "❌ 镜像标签仍为空，无法继续部署"
          exit 1
        fi
        
        echo "🚀 开始部署到服务器: $DEPLOY_USER@$DEPLOY_HOST"
        echo "📦 镜像标签: $IMAGE_TAG"
        
        # 创建部署脚本
        cat > deploy_script.sh << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        DEPLOY_PATH="$1"
        IMAGE_TAG="$2"
        ALIYUN_REGISTRY_PASSWORD="$3"
        ALIYUN_REGISTRY_USERNAME="$4"
        
        echo "🚀 Starting deployment..."
        echo "📂 部署路径: $DEPLOY_PATH"
        echo "📦 镜像标签: $IMAGE_TAG"
        
        # 切换到项目目录
        if [ ! -d "$DEPLOY_PATH" ]; then
          echo "❌ 部署目录不存在: $DEPLOY_PATH"
          exit 1
        fi
        cd "$DEPLOY_PATH"
        
        # 更新部署文件
        echo "📥 更新部署文件..."
        git pull origin main
        
        # 登录到阿里云容器镜像仓库
        echo "🔐 登录阿里云容器镜像仓库..."
        echo "$ALIYUN_REGISTRY_PASSWORD" | docker login registry.cn-hangzhou.aliyuncs.com -u "$ALIYUN_REGISTRY_USERNAME" --password-stdin
        
        # 检查本地是否已有镜像，避免重复下载
        if docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
          echo "📦 本地已有镜像: $IMAGE_TAG"
        else
          # 拉取新镜像
          echo "📦 拉取新镜像: $IMAGE_TAG"
          docker pull "$IMAGE_TAG"
        fi
        
        # 更新镜像标签
        echo "🔄 更新镜像标签..."
        sed -i "s|image:.*|image: $IMAGE_TAG|" docker-compose.prod.yml
        
        # 重新部署
        echo "🚀 重新部署应用..."
        docker compose -f docker-compose.prod.yml down
        docker compose -f docker-compose.prod.yml up -d
        
        # 等待服务启动（减少等待时间，通过健康检查验证）
        echo "⏳ 等待服务启动..."
        sleep 15
        
        # 简单健康检查
        echo "🔍 检查服务状态..."
        for i in {1..10}; do
          if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "✅ 服务启动成功"
            break
          fi
          echo "⏳ 等待服务启动... (尝试 $i/10)"
          sleep 3
        done
        
        # 清理旧镜像
        echo "🧹 清理旧镜像..."
        docker image prune -f
        
        echo "✅ Deployment completed successfully!"
        SCRIPT_EOF
        
        # 上传并执行部署脚本
        scp -o StrictHostKeyChecking=no deploy_script.sh "$DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy_script.sh"
        
        ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" \
          "chmod +x /tmp/deploy_script.sh && /tmp/deploy_script.sh '$DEPLOY_PATH' '$IMAGE_TAG' '$ALIYUN_REGISTRY_PASSWORD' '$ALIYUN_REGISTRY_USERNAME' && rm /tmp/deploy_script.sh"

    - name: Health check
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      run: |
        echo "🔍 Performing health check..."
        for i in {1..30}; do
          if curl -f "https://${{ secrets.DEPLOY_HOST }}/api/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            exit 0
          fi
          echo "⏳ Waiting for service to be ready... (attempt $i/30)"
          sleep 10
        done
        echo "❌ Health check failed!"
        exit 1

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # 这里可以添加通知逻辑，如发送 Slack/Discord 消息
        else
          echo "❌ Deployment failed!"
          # 这里可以添加失败通知逻辑
        fi